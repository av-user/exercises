	AREA fat_util, CODE, READONLY

fat_set_uninitialized PROC
	;R0: fat control block address
	LDR		R1, [R0, #FATCB_STATE_OFFSET]
	MOVS	R2, #FATCB_STATE_INITIALIZED_MASK
	MVNS	R2, R2
	ANDS	R1, R2
	STR		R1, [R0, #FATCB_STATE_OFFSET]
	BX		LR
	ENDP

fat_set_initialized PROC
	;R0: fat control block address
	LDR		R1, [R0, #FATCB_STATE_OFFSET]
	MOVS	R2, #FATCB_STATE_INITIALIZED_MASK
	ORRS	R1, R2
	STR		R1, [R0, #FATCB_STATE_OFFSET]
	BX		LR
	ENDP

fat_is_initialized PROC
	EXPORT	fat_is_initialized
	;R0: fat control block address
	LDR		R0, [R0, #FATCB_STATE_OFFSET]
	MOVS	R1, #FATCB_STATE_INITIALIZED_MASK
	ANDS	R0, R1
	BX		LR
	ENDP

fat_lba_get PROC
	EXPORT	fat_lba_get
	;R0: fat control block address
	LDR		R0, [R0, #FATCB_LBA_OFFSET]
	BX		LR
	ENDP

fat_reserved_get PROC
	EXPORT	fat_reserved_get
	;R0: fat control block address
	LDR		R0, [R0, #FATCB_RESERVED_SECTORS_OFFSET]
	BX		LR
	ENDP

fat_sectors_per_cluster_get PROC
	EXPORT	fat_sectors_per_cluster_get
	;R0: fat control block address
	LDRB	R0, [R0, #FATCB_SECTORS_PER_CLUSTER_OFFSET]
	BX		LR
	ENDP

fat_secs_per_fat_get PROC
	EXPORT	fat_secs_per_fat_get
	;R0: fat control block address
	LDR		R0, [R0, #FATCB_SECTORS_PER_FAT_OFFSET]
	BX		LR
	ENDP

fat_set_mbr_read PROC
	;R0: fat control block address
	LDR		R1, [R0, #FATCB_STATE_OFFSET]
	MOVS	R2, #FATCB_STATE_MBR_READ_MASK
	ORRS	R1, R2
	STR		R1, [R0, #FATCB_STATE_OFFSET]
	BX		LR
	ENDP

fat_is_mbr_read PROC
	;R0: fat control block address
	LDR		R0, [R0, #FATCB_STATE_OFFSET]
	MOVS	R1, #FATCB_STATE_MBR_READ_MASK
	ANDS	R0, R1
	BX		LR
	ENDP

fat_set_bootrec_read PROC
	;R0: fat control block address
	LDR		R1, [R0, #FATCB_STATE_OFFSET]
	MOVS	R2, #FATCB_STATE_BOOTREC_READ_MASK
	ORRS	R1, R2
	STR		R1, [R0, #FATCB_STATE_OFFSET]
	BX		LR
	ENDP

fat_is_bootrec_read PROC
	;R0: fat control block fat_is_bootrec_read
	LDR		R0, [R0, #FATCB_STATE_OFFSET]
	MOVS	R1, #FATCB_STATE_BOOTREC_READ_MASK
	ANDS	R0, R1
	BX		LR
	ENDP

	ROUT
fat_init	PROC
	EXPORT	fat_init
	;R0: fat control block address
	;R1: sdcard control block address
	PUSH	{LR,R4-R6}
	MOV		R4,	R0
	MOV		R5, R1
	BL		fat_set_uninitialized
	MOV		R0,	R5
	BL		sdcard_is_initialized
	CMP		R0, #0x00
	BEQ		%5
	STR		R5, [R4, #FATCB_SDCARD_ADDR_OFFSET]
	MOV		R0,	R4
	BL		fat_read_mbr
	[ :DEF:__DEBUG__
		MOV	R6, R0
		LDR	R0, =TEXT_MBR_RET
		LDR	R1, =TEXT_MBR_RET_END
		MOV	R2, R6
		BL	uart_send_text_byte
		MOV	R0, R6
	]
	CMP		R0, #0x00
	BEQ		%5
	MOV		R0,	R4
	BL		fat_read_boot_record
	[ :DEF:__DEBUG__
		MOV	R6, R0
		LDR	R0, =TEXT_MBR_RET
		LDR	R1, =TEXT_MBR_RET_END
		MOV	R2, R6
		BL	uart_send_text_byte
		MOV	R0, R6
	]
	CMP		R0, #0x00
	BEQ		%5
	MOV		R0,	R4
	BL		fat_set_initialized
	MOVS	R0, #0x01
5	POP		{PC,R4-R6}
    ENDP

	ROUT
fat_read_boot_record	PROC
	;R0: fat control block address
	PUSH	{LR, R4-R5}
	MOV		R4, R0
	LDR		R1, [R4, #FATCB_LBA_OFFSET]
	LDR		R0, [R4, #FATCB_SDCARD_ADDR_OFFSET]
	LDR		R2, =BLOCK_SIZE
	MULS	R1, R2, R1
	LDR		R2, =DATA_BLOCK
	BL		sdcard_cmd17
	CMP		R0, #0x00
	BEQ		%1
	CMP		R1, #0xAA
	BNE		%1
	LDR		R2, =DATA_BLOCK
	MOVS	R3, #BOOTREC_RESERVED_SECTORS_OFFSET
	LDRH	R5, [R2,R3]
	STR		R5, [R4, #FATCB_RESERVED_SECTORS_OFFSET]
	MOVS	R3, #BOOTREC_SECTORS_PER_CLUSTER_OFFSET
	LDRB	R5, [R2,R3]
	STRB	R5, [R4, #FATCB_SECTORS_PER_CLUSTER_OFFSET]
	LDRB	R3, [R4, #FATCB_PARTITION_TYPE_OFFSET]
	CMP		R3, #FATCB_PARTITION_TYPE_06_FAT16_LARGE
	BNE		%20
	LDRH	R5, [R2,#BOOTREC_SECTORS_PER_FAT_SMALL_OFFSET]
	STR		R5, [R4, #FATCB_SECTORS_PER_FAT_OFFSET]
	B		%22
20	CMP		R3, #FATCB_PARTITION_TYPE_0B_FAT32_LARGE
	BNE		%21
	MOVS	R3, #BOOTREC_SECTORS_PER_FAT_OFFSET
	LDR		R5, [R2,R3]
	STR		R5, [R4, #FATCB_SECTORS_PER_FAT_OFFSET]
	B		%22
21	NOP	;todo other partition types
	B		%1
22	MOV		R0, R4
	BL		fat_set_bootrec_read
	MOVS	R0, #0x01	;success
	B		%2
1	EORS	R0,R0,R0	;failure
2	POP		{PC, R4-R5}
    ENDP

	ROUT
fat_read_mbr	PROC
	;R0: fat control block address
	PUSH	{LR, R4-R6}
	MOV		R4, R0
	LDR		R0, [R4, #FATCB_SDCARD_ADDR_OFFSET]
	MOVS	R1, #MBR_BLOCK_ADDRESS
	LDR		R2, =DATA_BLOCK
	BL		sdcard_cmd17
	CMP		R0, #0x00
	BEQ		%1
	CMP		R1, #0xAA
	BNE		%1
	LDR		R2, =DATA_BLOCK
	LDR		R3, =MBR_1ST_PARTITION_ENTRY_OFFSET
	ADDS	R2, R3
	LDR		R3, =PART_ENTRY_LBA_OFFSET
	LDRH	R5, [R2,R3]
	ADDS	R3, #0x02
	LDRH	R6, [R2,R3]
	LSLS	R6, #0x10
	ADD		R6, R5
	STR		R6, [R4, #FATCB_LBA_OFFSET]
	LDRB	R3, [R2, #PART_ENTRY_PARTITION_TYPE_OFFSET]
	STRB	R3, [R4, #FATCB_PARTITION_TYPE_OFFSET]
	MOV		R0, R4
	BL		fat_set_mbr_read
	MOVS	R0, #0x01
	B		%2
1	EORS	R0,R0,R0	
2	POP		{PC, R4-R6}
    ENDP

;******************

	EXPORT	BLOCK_SIZE

MBR_BLOCK_ADDRESS						EQU		0x00
BLOCK_SIZE								EQU		0x200
MBR_1ST_PARTITION_ENTRY_OFFSET			EQU		0x01BE

PART_ENTRY_PARTITION_TYPE_OFFSET		EQU		0x04
PART_ENTRY_LBA_OFFSET					EQU		0x08

BOOTREC_SECTORS_PER_CLUSTER_OFFSET		EQU		0x0D
BOOTREC_RESERVED_SECTORS_OFFSET			EQU		0x0E
BOOTREC_SECTORS_PER_FAT_OFFSET			EQU		0x24
BOOTREC_SECTORS_PER_FAT_SMALL_OFFSET	EQU		0x16

FATCB_PARTITION_TYPE_00_UNKNOWN			EQU	0x00
FATCB_PARTITION_TYPE_01_FAT12			EQU	0x01
FATCB_PARTITION_TYPE_04_FAT16_SMALL		EQU	0x04	;partition smaller than 32Mb
FATCB_PARTITION_TYPE_05_DOS_EXTENDED	EQU	0x05
FATCB_PARTITION_TYPE_06_FAT16_LARGE		EQU	0x06	;partition larger than 32Mb
FATCB_PARTITION_TYPE_0B_FAT32_LARGE		EQU	0x0B	;partition up to 2048 Gb
FATCB_PARTITION_TYPE_0C_FAT32_LBA		EQU	0x0C
FATCB_PARTITION_TYPE_0E_FAT16_LBA		EQU	0x0E
FATCB_PARTITION_TYPE_0F_DOS_EXT_LBA		EQU	0x0F

;fat control block structure
FATCB_STATE_OFFSET					EQU		0x00
FATCB_SDCARD_ADDR_OFFSET			EQU		0x04
FATCB_LBA_OFFSET					EQU		0x08
FATCB_RESERVED_SECTORS_OFFSET		EQU		0x0C
FATCB_SECTORS_PER_FAT_OFFSET		EQU		0x10
FATCB_PARTITION_TYPE_OFFSET			EQU		0x14
FATCB_SECTORS_PER_CLUSTER_OFFSET	EQU		0x15
;...	
FATCB_STATE_INITIALIZED_MASK	EQU	0x00000001
FATCB_STATE_MBR_READ_MASK		EQU	0x00000002
FATCB_STATE_BOOTREC_READ_MASK	EQU	0x00000004

	EXTERN	sdcard_is_initialized
		
	EXTERN	sdcard_cmd17

	[ :DEF:__DEBUG__
		EXTERN	uart_send_text_byte
		EXTERN	uart_send
	]

	ALIGN
	AREA    data, DATA
	EXPORT	DATA_BLOCK [WEAK]
DATA_BLOCK			SPACE	512
	
	[ :DEF:__DEBUG__
TEXT_MBR_RET	DCB	"mbr ret:"
TEXT_MBR_RET_END
TEXT_BOOT_RET	DCB	"boot ret:"
TEXT_BOOT_RET_END
	]
	END
